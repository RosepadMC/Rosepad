--- GuiContainer.java
+++ GuiContainer.java
@@ -2,4 +2,7 @@
 
 import org.lwjgl.opengl.GL11;
+
+import net.buj.rml.Game;
+
 import java.util.ArrayList;
 import java.util.List;
@@ -10,17 +13,108 @@
     protected int ySize;
     protected List<SlotInventory> inventorySlots;
-    
+    protected int selectedSlot = 0;
+    protected IInventory selectedInventory = null;
+
     static {
         GuiContainer.itemRenderer = new RenderItem();
     }
-    
+
     public GuiContainer() {
         this.xSize = 176;
         this.ySize = 166;
-        this.inventorySlots = (List<SlotInventory>)new ArrayList();
+        this.inventorySlots = new ArrayList<>();
     }
-    
+
+    public static String getItemInfo(final ItemStack stack, List<String> additionalInfo, GuiContainer inventory) {
+        StringBuilder renderItemName;
+
+        Item item = stack.getItem();
+        switch (item.getRarity()) {
+            case -1:
+                renderItemName = new StringBuilder("§4");
+                break;
+            case 1:
+                renderItemName = new StringBuilder("§e");
+                break;
+            case 2:
+                renderItemName = new StringBuilder("§b");
+                break;
+            case 3:
+                renderItemName = new StringBuilder("§d");
+                break;
+            default:
+                renderItemName = new StringBuilder();
+                break;
+        }
+        renderItemName.append(item.getName());
+
+        if (stack.itemDmg > 0 && (item instanceof ItemArmor || item instanceof ItemTool
+                || item instanceof ItemSword || item instanceof ItemFlintAndSteel)) {
+            int max = stack.getMaxDamage();
+            float per = 1 - stack.itemDmg / (float) max;
+            String durColor = per > 0.6f ? "a" : per > 0.2f ? "e" : "c";
+            additionalInfo.add("Durability: §" + durColor + (max - stack.itemDmg) + "§r/" + max);
+        }
+
+        if (item instanceof ItemBow && inventory != null) {
+            int count = 0;
+            for (SlotInventory slot : inventory.inventorySlots) {
+                ItemStack stack1;
+                if ((stack1 = slot.getStack()) == null) continue;
+                if (stack1.getItem() != Item.ARROW) continue;
+
+                count += Math.max(1, stack1.stackSize); // Negative arrows act like 1 arrow
+            }
+            additionalInfo.add("Ammo: §e" + count);
+        }
+
+        if (item == Item.DOOR_IRON) {
+            additionalInfo.add("§6Hub code is missing from Lilypad QA");
+        }
+
+        if (item == Item.edibleFire) {
+            additionalInfo.add("It does look tasty, but please don't eat it");
+        }
+
+        if (inventory instanceof GuiFurnace && TileEntityFurnace.getItemBurnTime(stack) > 0) {
+            int time = TileEntityFurnace.getItemBurnTime(stack);
+            String burnColor = time > 1600 ? "b" : time > 300 ? "c" : time > 100 ? "6" : "e";
+            additionalInfo.add("Burn time: §" + burnColor + (TileEntityFurnace.getItemBurnTime(stack) / 20) + " seconds");
+        }
+
+        return renderItemName.toString();
+    }
+
+    public static void drawTooltip(
+            final int x, final int y, final String name, final List<String> info, GuiScreen screen) {
+        GL11.glDisable(GL11.GL_DEPTH_TEST);
+
+        int lenX = screen.fontRenderer.getStringWidth(name);
+        int lenY = 10;
+        if (info.size() > 0) {
+            lenY *= 2 + info.size();
+            for (String str : info) {
+                lenX = Math.max(screen.fontRenderer.getStringWidth(str), lenX);
+            }
+        }
+
+        screen.drawRect(
+                x, y,
+                x + 10 + lenX, y + 8 + lenY,
+                0xAA000000
+        );
+        screen.fontRenderer.drawString(name, x + 5, y + 5, 0xffffff);
+
+        for (int i = 0; i < info.size(); i++) {
+            screen.fontRenderer.drawString(info.get(i), x + 5, y + 25 + i * 10, 0xffffff);
+        }
+
+        GL11.glEnable(GL11.GL_DEPTH_TEST);
+    }
+
     @Override
     public void drawScreen(final int mouseX, final int mouseY, final float renderPartialTick) {
+        String renderItemName = null;
+        List<String> additionalInfo = new ArrayList<>();
         this.drawDefaultBackground();
         final int n = (this.width - this.xSize) / 2;
@@ -33,15 +127,26 @@
         GL11.glPushMatrix();
         GL11.glTranslatef((float)n, (float)n2, 0.0f);
-        GL11.glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
+        RenderEngine.glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
         GL11.glEnable(32826);
-        for (int i = 0; i < this.inventorySlots.size(); ++i) {
-            final SlotInventory slotInventory = (SlotInventory)this.inventorySlots.get(i);
+        selectedInventory = null;
+        selectedSlot = -1;
+        for (final SlotInventory slotInventory : this.inventorySlots) {
             this.drawSlotInventory(slotInventory);
             if (slotInventory.getIsMouseOverSlot(mouseX, mouseY)) {
+                selectedInventory = slotInventory.inventory;
+                selectedSlot = slotInventory.slotIndex;
                 GL11.glDisable(2896);
                 GL11.glDisable(2929);
                 final int xDisplayPosition = slotInventory.xDisplayPosition;
                 final int yDisplayPosition = slotInventory.yDisplayPosition;
-                this.drawGradientRect(xDisplayPosition, yDisplayPosition, xDisplayPosition + 16, yDisplayPosition + 16, -2130706433, -2130706433);
+                if (slotInventory.getStack() != null && slotInventory.getStack().getItem() != null &&
+                        this.mc.thePlayer.inventory.draggedItemStack == null) {
+                    renderItemName = getItemInfo(slotInventory.getStack(), additionalInfo, this);
+                }
+                this.drawGradientRect(
+                        xDisplayPosition, yDisplayPosition,
+                        xDisplayPosition + 16, yDisplayPosition + 16,
+                        -2130706433, -2130706433
+                );
                 GL11.glEnable(2896);
                 GL11.glEnable(2929);
@@ -51,6 +156,12 @@
         if (inventory.draggedItemStack != null) {
             GL11.glTranslatef(0.0f, 0.0f, 32.0f);
-            GuiContainer.itemRenderer.renderItemIntoGUI(this.fontRenderer, this.mc.renderEngine, inventory.draggedItemStack, mouseX - n - 8, mouseY - n2 - 8);
-            GuiContainer.itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.mc.renderEngine, inventory.draggedItemStack, mouseX - n - 8, mouseY - n2 - 8);
+            GuiContainer.itemRenderer.renderItemIntoGUI(
+                    this.fontRenderer, this.mc.renderEngine, inventory.draggedItemStack,
+                    mouseX - n - 8, mouseY - n2 - 8
+            );
+            GuiContainer.itemRenderer.renderItemOverlayIntoGUI(
+                    this.fontRenderer, this.mc.renderEngine, inventory.draggedItemStack,
+                    mouseX - n - 8, mouseY - n2 - 8
+            );
         }
         GL11.glDisable(32826);
@@ -59,14 +170,22 @@
         GL11.glDisable(2929);
         this.drawGuiContainerForegroundLayer();
+        if (renderItemName != null) {
+            drawTooltip(
+                    mouseX - n + 10, mouseY - n2 + 10,
+                    renderItemName,
+                    additionalInfo,
+                    this
+            );
+        }
         GL11.glEnable(2896);
         GL11.glEnable(2929);
         GL11.glPopMatrix();
     }
-    
+
     protected void drawGuiContainerForegroundLayer() {
     }
-    
+
     protected abstract void drawGuiContainerBackgroundLayer(final float renderPartialTick);
-    
+
     private void drawSlotInventory(final SlotInventory slotInventory) {
         final IInventory inventory = slotInventory.inventory;
@@ -80,16 +199,25 @@
                 GL11.glDisable(2896);
                 this.mc.renderEngine.bindTexture(this.mc.renderEngine.getTexture("/gui/items.png"));
-                this.drawTexturedModalRect(xDisplayPosition, yDisplayPosition, backgroundIconIndex % 16 * 16, backgroundIconIndex / 16 * 16, 16, 16);
+                this.drawTexturedModalRect(
+                        xDisplayPosition, yDisplayPosition,
+                        backgroundIconIndex % 16 * 16, backgroundIconIndex / 16 * 16,
+                        16, 16
+                );
                 GL11.glEnable(2896);
                 return;
             }
         }
-        GuiContainer.itemRenderer.renderItemIntoGUI(this.fontRenderer, this.mc.renderEngine, stackInSlot, xDisplayPosition, yDisplayPosition);
-        GuiContainer.itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.mc.renderEngine, stackInSlot, xDisplayPosition, yDisplayPosition);
+        GuiContainer.itemRenderer.renderItemIntoGUI(
+                this.fontRenderer, this.mc.renderEngine, stackInSlot,
+                xDisplayPosition, yDisplayPosition
+        );
+        GuiContainer.itemRenderer.renderItemOverlayIntoGUI(
+                this.fontRenderer, this.mc.renderEngine, stackInSlot,
+                xDisplayPosition, yDisplayPosition
+        );
     }
-    
+
     private Slot getSlotAtPosition(final int integer1, final int integer2) {
-        for (int i = 0; i < this.inventorySlots.size(); ++i) {
-            final SlotInventory slotInventory = (SlotInventory)this.inventorySlots.get(i);
+        for (final SlotInventory slotInventory : this.inventorySlots) {
             if (slotInventory.getIsMouseOverSlot(integer1, integer2)) {
                 return slotInventory;
@@ -98,5 +226,5 @@
         return null;
     }
-    
+
     @Override
     protected void mouseClicked(final int x, final int y, final int mouseButton) {
@@ -109,5 +237,7 @@
                     if (stack != null && inventory.draggedItemStack == null) {
                         final int stackSize = (mouseButton == 0) ? stack.stackSize : ((stack.stackSize + 1) / 2);
-                        inventory.draggedItemStack = slotAtPosition.inventory.decrStackSize(slotAtPosition.slotIndex, stackSize);
+                        inventory.draggedItemStack = slotAtPosition.inventory.decrStackSize(
+                                slotAtPosition.slotIndex, stackSize
+                        );
                         if (stack.stackSize == 0) {
                             slotAtPosition.putStack(null);
@@ -115,5 +245,5 @@
                         slotAtPosition.onPickupFromSlot();
                     }
-                    else if (stack == null && inventory.draggedItemStack != null && slotAtPosition.isItemValid(inventory.draggedItemStack)) {
+                    else if (stack == null && slotAtPosition.isItemValid(inventory.draggedItemStack)) {
                         int stackSize = (mouseButton == 0) ? inventory.draggedItemStack.stackSize : 1;
                         if (stackSize > slotAtPosition.inventory.getInventoryStackLimit()) {
@@ -125,14 +255,13 @@
                         }
                     }
-                    else if (stack != null && inventory.draggedItemStack != null) {
+                    else if (stack != null) {
                         if (slotAtPosition.isItemValid(inventory.draggedItemStack)) {
                             if (stack.itemID != inventory.draggedItemStack.itemID) {
                                 if (inventory.draggedItemStack.stackSize <= slotAtPosition.inventory.getInventoryStackLimit()) {
-                                    final ItemStack draggedItemStack = stack;
                                     slotAtPosition.putStack(inventory.draggedItemStack);
-                                    inventory.draggedItemStack = draggedItemStack;
+                                    inventory.draggedItemStack = stack;
                                 }
                             }
-                            else if (stack.itemID == inventory.draggedItemStack.itemID) {
+                            else {
                                 if (mouseButton == 0) {
                                     int stackSize = inventory.draggedItemStack.stackSize;
@@ -151,5 +280,5 @@
                                     itemStack3.stackSize += stackSize;
                                 }
-                                else if (mouseButton == 1) {
+                                else {
                                     int stackSize = 1;
                                     if (stackSize > slotAtPosition.inventory.getInventoryStackLimit() - stack.stackSize) {
@@ -163,7 +292,5 @@
                                         inventory.draggedItemStack = null;
                                     }
-                                    final ItemStack itemStack4;
-                                    final ItemStack itemStack2 = itemStack4 = stack;
-                                    itemStack4.stackSize += stackSize;
+                                    stack.stackSize += stackSize;
                                 }
                             }
@@ -172,7 +299,5 @@
                             final int stackSize = stack.stackSize;
                             if (stackSize > 0 && stackSize + inventory.draggedItemStack.stackSize <= inventory.draggedItemStack.getMaxStackSize()) {
-                                final ItemStack draggedItemStack3;
-                                final ItemStack draggedItemStack2 = draggedItemStack3 = inventory.draggedItemStack;
-                                draggedItemStack3.stackSize += stackSize;
+                                inventory.draggedItemStack.stackSize += stackSize;
                                 stack.splitStack(stackSize);
                                 if (stack.stackSize == 0) {
@@ -205,16 +330,27 @@
         }
     }
-    
+
     @Override
-    protected void mouseMovedOrUp(final int x, final int y, final int mouseButton) {
-    }
-    
-    @Override
     protected void keyTyped(final char character, final int key) {
-        if (key == 1 || key == this.mc.gameSettings.keyBindInventory.keyCode) {
+        if (key == 1 || key == Game.OPTIONS.keyCodeFor("inventory")) {
             this.mc.displayGuiScreen(null);
         }
+
+        if (key == Game.OPTIONS.keyCodeFor("drop") && this.selectedInventory != null) {
+            ItemStack stack = this.selectedInventory.getStackInSlot(this.selectedSlot);
+            if (stack != null)
+                if (stack.stackSize > 0) {
+                    this.mc.thePlayer.dropPlayerItem(stack.splitStack(1));
+                    if (stack.stackSize <= 0) {
+                        selectedInventory.setInventorySlotContents(selectedSlot, null);
+                    }
+                }
+                else {
+                    this.mc.thePlayer.dropPlayerItem(stack);
+                    selectedInventory.setInventorySlotContents(selectedSlot, null);
+                }
+        }
     }
-    
+
     @Override
     public void onGuiClosed() {
@@ -225,5 +361,5 @@
         }
     }
-    
+
     @Override
     public boolean doesGuiPauseGame() {
