--- GuiOptions.java
+++ GuiOptions.java
@@ -1,42 +1,168 @@
 package net.minecraft.src;
 
+import java.util.*;
+
+import net.buj.rml.Game;
+import net.buj.rml.options.GameOption;
+import net.buj.rml.options.GameOptionUI;
+import net.minecraft.client.Minecraft;
+
+import net.minecraft.src.GuiName;
+
 public class GuiOptions extends GuiScreen {
     private GuiScreen parentScreen;
     protected String screenTitle;
-    private GameSettings gameSettings;
-    
-    public GuiOptions(final GuiScreen screen, final GameSettings gameSettings) {
-        this.screenTitle = "Options";
-        this.parentScreen = screen;
-        this.gameSettings = gameSettings;
+    private List<Object> buttons;
+    private String[] category;
+
+    private static class OptionIntoButton<T> extends GuiButton {
+        private GameOption<T> option;
+
+        public OptionIntoButton(int x, int y, GameOption<T> opt) {
+            super(-1, x, y, 150, 20, opt.getUI().getName(opt));
+            option = opt;
+        }
+
+        @Override
+        public void mousePressed(int mouseX, int mouseY) {
+            GameOptionUI<T> ui = option.getUI();
+            if (ui instanceof GameOptionUI.Button) {
+                ((GameOptionUI.Button<T>) ui).execute(option);
+            }
+            this.displayString = option.getUI().getName(option);
+        }
     }
-    
-    @Override
-    public void actionPerformed() {
-        for (int i = 0; i < this.gameSettings.numberOfOptions; ++i) {
-            this.controlList.add(new GuiSmallButton(i, this.width / 2 - 155 + i % 2 * 160, this.height / 6 + 24 * (i >> 1), this.gameSettings.getOptionDisplayString(i)));
+
+    private static class OptionIntoSlider<T> extends GuiSlider {
+        private GameOption<T> option;
+
+        public OptionIntoSlider(int x, int y, GameOption<T> opt) {
+            super(-1, x, y, 150, 20, opt.getUI().getName(opt), ((GameOptionUI.Slider<T>) opt.getUI()).percent(opt));
+            option = opt;
+
+            setOnChangeHandler(p -> {
+                    GameOptionUI.Slider<T> ui = (GameOptionUI.Slider<T>) option.getUI();
+                    ui.change(option, p);
+                    this.displayString = ui.getName(option);
+            });
         }
-        this.controlList.add(new GuiButton(100, this.width / 2 - 100, this.height / 6 + 120 + 12, "Controls..."));
-        this.controlList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 168, "Done"));
     }
-    
-    @Override
-    protected void actionPerformed(final GuiButton button) {
-        if (!button.enabled) {
-            return;
+
+    private GuiButton optionIntoCtrl(GameOption<?> opt, int x, int y) {
+        GameOptionUI<?> ui = opt.getUI();
+
+        if (ui instanceof GameOptionUI.Button) {
+            return new OptionIntoButton<>(x, y, opt);
         }
-        if (button.id < 100) {
-            this.gameSettings.setOptionValue(button.id, 1);
-            button.displayString = this.gameSettings.getOptionDisplayString(button.id);
+        if (ui instanceof GameOptionUI.Slider) {
+            return new OptionIntoSlider<>(x, y, opt);
         }
-        if (button.id == 100) {
-            this.mc.displayGuiScreen(new GuiControls(this, this.gameSettings));
+
+        throw new RuntimeException("panic! unknown option ui type");
+    }
+
+    private static class CategoryIntoButton extends GuiButton {
+        private String[] category;
+        private GuiScreen screen;
+
+        public CategoryIntoButton(int x, int y, String[] c, GuiScreen parent) {
+            super(-1, x, y, 150, 20, c.length == 0 ? "Unnamed" : c[c.length - 1]);
+            category = c;
+            screen = parent;
         }
-        if (button.id == 200) {
-            this.mc.displayGuiScreen(this.parentScreen);
+
+        @Override
+        public void mousePressed(int mouseX, int mouseY) {
+            Minecraft.INSTANCE.displayGuiScreen(new GuiOptions(screen, category));
         }
     }
-    
+
+    public GuiOptions(
+            final GuiScreen screen,
+            final String[] path
+    ) {
+        if (path.length == 0) this.screenTitle = "Options";
+        else this.screenTitle = path[path.length - 1];
+        this.parentScreen = screen;
+        this.category = path;
+
+        List<Object> gotoSubmenus = new ArrayList<>();
+        List<String[]> categories = new ArrayList<>();
+
+        for (GameOption<?> opt : Minecraft.INSTANCE.gameSettings.list()) {
+            String[] category = opt.getCategory();
+            if (Arrays.deepEquals(category, path)) {
+                gotoSubmenus.add(opt);
+            }
+            else if (category.length == path.length + 1 && !categories.stream()
+                     .anyMatch(other -> Arrays.deepEquals(other, category))) {
+                categories.add(Arrays.copyOf(category, category.length));
+            }
+        }
+
+        for (String[] category : categories) {
+            gotoSubmenus.add(category);
+        }
+
+        buttons = gotoSubmenus;
+    }
+
     @Override
+    public void actionPerformed() {
+        this.controlList.clear();
+
+        int buttonID = 0;
+
+        for (Object button : buttons) {
+            if (button instanceof GameOption<?>) {
+                GameOption<?> option = (GameOption<?>) button;
+                controlList.add(optionIntoCtrl(option,
+                                               this.width / 2 - 155 + buttonID % 2 * 160,
+                                               this.height / 6 + 24 * (buttonID >> 1)));
+            }
+            else if (button instanceof String[]) {
+                String[] category = (String[]) button;
+                controlList.add(new CategoryIntoButton(this.width / 2 - 155 + buttonID % 2 * 160,
+                                                       this.height / 6 + 24 * (buttonID >> 1),
+                                                       category,
+                                                       this));
+            }
+            else System.err.println("No mappings for class " + button.getClass().getSimpleName());
+
+            buttonID++;
+        }
+
+        this.controlList.add(
+            new GuiButton(
+                150,
+                this.width / 2 - 100,
+                this.height / 4 + 20 + 12,
+                "Change name").setOnClickListener(() -> {
+                    mc.displayGuiScreen(new GuiName(this));
+            }));
+        this.controlList.add(
+                new GuiButton(
+                              -1,
+                              this.width / 2 - 100, this.size.getScaledHeight() / 6 * 5,
+                              "Done"
+        ).setOnClickListener(() -> {
+                Game.options.save();
+                mc.displayGuiScreen(parentScreen);
+        }));
+        if (category.length == 0)
+            this.controlList.add(
+                    new GuiButton(
+                                  -1,
+                                  this.width / 2 - 100, this.size.getScaledHeight() / 6 * 5 - 30,
+                                  "Controls"
+            ).setOnClickListener(() -> {
+                    mc.displayGuiScreen(new GuiControls(this));
+            }));
+    }
+
+    @Override
+    protected void actionPerformed(final GuiButton button) {}
+
+    @Override
     public void drawScreen(final int mouseX, final int mouseY, final float renderPartialTick) {
         this.drawDefaultBackground();
@@ -44,3 +170,12 @@
         super.drawScreen(mouseX, mouseY, renderPartialTick);
     }
+
+    @Override
+    protected void keyTyped(final char character, final int key) {
+        if (key == 1) {
+            Game.options.save();
+            this.mc.displayGuiScreen(this.parentScreen);
+            this.mc.setIngameFocus();
+        }
+    }
 }
