--- BlockStairs.java
+++ BlockStairs.java
@@ -6,5 +6,5 @@
 public class BlockStairs extends Block {
     private Block modelBlock;
-    
+
     protected BlockStairs(final int blockID, final Block modelBlock) {
         super(blockID, modelBlock.blockIndexInTexture, modelBlock.material);
@@ -14,25 +14,25 @@
         this.setStepSound(modelBlock.stepSound);
     }
-    
+
     @Override
     public boolean isOpaqueCube() {
         return false;
     }
-    
+
     @Override
     public boolean renderAsNormalBlock() {
         return false;
     }
-    
+
     @Override
     public int getRenderType() {
         return 10;
     }
-    
+
     @Override
     public boolean shouldSideBeRendered(final IBlockAccess blockAccess, final int x, final int y, final int z, final int side) {
         return super.shouldSideBeRendered(blockAccess, x, y, z, side);
     }
-    
+
     @Override
     public void getCollidingBoundingBoxes(final World world, final int x, final int y, final int z, final AxisAlignedBB aabb, final ArrayList<AxisAlignedBB> collidingBoundingBoxes) {
@@ -64,5 +64,5 @@
         this.setBlockBounds(0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f);
     }
-    
+
     @Override
     public void onNeighborBlockChange(final World world, final int x, final int y, final int z, final int id) {
@@ -86,5 +86,5 @@
         this.modelBlock.onNeighborBlockChange(world, x, y, z, id);
     }
-    
+
     private void updateState(final World world, final int x, final int y, final int z) {
         if (!this.isBlockStair(world, x, y, z)) {
@@ -136,99 +136,99 @@
         }
     }
-    
+
     private boolean isBlockSolid(final World world, final int x, final int y, final int z) {
         return world.getBlockMaterial(x, y, z).isSolid();
     }
-    
+
     private boolean isBlockStair(final World world, final int x, final int y, final int z) {
         final int blockID = world.getBlockID(x, y, z);
         return blockID != 0 && Block.BLOCKS_LIST[blockID].getRenderType() == 10;
     }
-    
+
     @Override
     public void randomDisplayTick(final World world, final int x, final int y, final int z, final Random rand) {
         this.modelBlock.randomDisplayTick(world, x, y, z, rand);
     }
-    
+
     @Override
     public void onBlockClicked(final World world, final int x, final int y, final int z, final EntityPlayer entityPlayer) {
         this.modelBlock.onBlockClicked(world, x, y, z, entityPlayer);
     }
-    
+
     @Override
     public void onBlockDestroyedByPlayer(final World world, final int x, final int y, final int z, final int metadata) {
         this.modelBlock.onBlockDestroyedByPlayer(world, x, y, z, metadata);
     }
-    
+
     @Override
-    public float getBlockBrightness(final IBlockAccess blockAccess, final int x, final int y, final int z) {
-        return this.modelBlock.getBlockBrightness(blockAccess, x, y, z);
+    public float getBlockBrightness(final IBlockAccess blockAccess, final int x, final int y, final int z, final EnumColorChannel color) {
+        return this.modelBlock.getBlockBrightness(blockAccess, x, y, z, color);
     }
-    
+
     @Override
     public float getExplosionResistance(final Entity entity) {
         return this.modelBlock.getExplosionResistance(entity);
     }
-    
+
     @Override
     public int getRenderBlockPass() {
         return this.modelBlock.getRenderBlockPass();
     }
-    
+
     @Override
     public int idDropped(final int metadata, final Random rand) {
         return this.modelBlock.idDropped(metadata, rand);
     }
-    
+
     @Override
     public int quantityDropped(final Random rand) {
         return this.modelBlock.quantityDropped(rand);
     }
-    
+
     @Override
     public int getBlockTextureFromSideAndMetadata(final int side, final int metadata) {
         return this.modelBlock.getBlockTextureFromSideAndMetadata(side, metadata);
     }
-    
+
     @Override
     public int getBlockTextureFromSide(final int side) {
         return this.modelBlock.getBlockTextureFromSide(side);
     }
-    
+
     @Override
     public int getBlockTexture(final IBlockAccess blockAccess, final int x, final int y, final int z, final int side) {
         return this.modelBlock.getBlockTexture(blockAccess, x, y, z, side);
     }
-    
+
     @Override
     public int tickRate() {
         return this.modelBlock.tickRate();
     }
-    
+
     @Override
     public AxisAlignedBB getSelectedBoundingBoxFromPool(final World world, final int x, final int y, final int z) {
         return this.modelBlock.getSelectedBoundingBoxFromPool(world, x, y, z);
     }
-    
+
     @Override
     public void velocityToAddToEntity(final World world, final int x, final int y, final int z, final Entity entity, final Vec3D velocityVector) {
         this.modelBlock.velocityToAddToEntity(world, x, y, z, entity, velocityVector);
     }
-    
+
     @Override
     public boolean isCollidable() {
         return this.modelBlock.isCollidable();
     }
-    
+
     @Override
     public boolean canCollideCheck(final int metadata, final boolean boolean2) {
         return this.modelBlock.canCollideCheck(metadata, boolean2);
     }
-    
+
     @Override
     public boolean canPlaceBlockAt(final World world, final int x, final int y, final int z) {
         return this.modelBlock.canPlaceBlockAt(world, x, y, z);
     }
-    
+
     @Override
     public void onBlockAdded(final World world, final int x, final int y, final int z) {
@@ -236,35 +236,35 @@
         this.modelBlock.onBlockAdded(world, x, y, z);
     }
-    
+
     @Override
     public void onBlockRemoval(final World world, final int x, final int y, final int z) {
         this.modelBlock.onBlockRemoval(world, x, y, z);
     }
-    
+
     @Override
     public void dropBlockAsItemWithChance(final World world, final int x, final int y, final int z, final int metadata, final float chance) {
         this.modelBlock.dropBlockAsItemWithChance(world, x, y, z, metadata, chance);
     }
-    
+
     @Override
     public void dropBlockAsItem(final World world, final int x, final int y, final int z, final int metadata) {
         this.modelBlock.dropBlockAsItem(world, x, y, z, metadata);
     }
-    
+
     @Override
     public void onEntityWalking(final World world, final int x, final int y, final int z, final Entity entity) {
         this.modelBlock.onEntityWalking(world, x, y, z, entity);
     }
-    
+
     @Override
     public void updateTick(final World world, final int x, final int y, final int z, final Random rand) {
         this.modelBlock.updateTick(world, x, y, z, rand);
     }
-    
+
     @Override
     public boolean blockActivated(final World world, final int x, final int y, final int z, final EntityPlayer entityPlayer) {
         return this.modelBlock.blockActivated(world, x, y, z, entityPlayer);
     }
-    
+
     @Override
     public void onBlockDestroyedByExplosion(final World world, final int x, final int y, final int z) {
