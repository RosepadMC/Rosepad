--- GuiScreenInputPass.java
+++ GuiScreenInputPass.java
@@ -1,11 +1,13 @@
 package net.minecraft.src;
 
-import java.io.Writer;
 import java.io.IOException;
 import java.io.FileWriter;
 import java.io.FileNotFoundException;
+import java.util.Objects;
+import java.util.Random;
 import java.util.Scanner;
 import java.io.File;
 import net.minecraft.client.Minecraft;
+import java.util.NoSuchElementException;
 
 public class GuiScreenInputPass extends GuiScreen {
@@ -17,11 +19,89 @@
     private String einval;
     public static String name;
+    private String errorMessage = "";
     public static final int[] EndBytes;
-    
+
     static {
         GuiScreenInputPass.name = "";
         EndBytes = new int[] { 39, 86, 26, 72, 13, 91, 23 };
     }
-    
+
+    // Source: https://github.com/NexTre-dev/alphaver/blob/main/website/29.07.2022/avkeys.js
+
+    String GenerateKeyForName(String name) {
+        Random random = new Random();
+        String ret = "";
+        name = name.toUpperCase();
+        String nameRecalc = name;
+
+        if (name.startsWith("DEV")) {
+            errorMessage = "This username is reserved for internal use";
+            return "#";
+        }
+
+        if (name.isEmpty()) {
+            errorMessage = "Username must not be empty";
+            return "#";
+        }
+
+        if (name.length() >= 15) {
+            errorMessage = "Name too long";
+            return "#";
+        }
+        for (char a : name.toCharArray()) {
+            if ((a < 'A' || a > 'Z') && a != '_' && (a < '0' || a > '9')){
+                errorMessage = "Invalid character, use only A to Z";
+                return "#";
+            }
+        }
+
+        StringBuilder encName = new StringBuilder();
+        int writtenBytes = 0;
+        for (char a : name.toCharArray()) {
+            encName.append(70 - (26 - (a - 'A')));
+            writtenBytes++;
+        }
+        encName.append(EndBytes[random.nextInt(EndBytes.length)]);
+        writtenBytes++;
+
+        StringBuilder fullNameStr = new StringBuilder(encName.toString());
+
+        while (writtenBytes != 15) {
+            fullNameStr.append(10 + random.nextInt(89));
+            writtenBytes++;
+        }
+
+        int checksumFullName = 0;
+        for (char a : fullNameStr.toString().toCharArray()) {
+            checksumFullName += a - '0';
+        }
+        int checksumName = 0;
+        for (char a : encName.toString().toCharArray()) {
+            checksumName += a - '0';
+        }
+        checksumName %= 100;
+
+        int checkSumPart1 = checksumFullName + random.nextInt(999-checksumFullName);
+        int checkSumPart2 = checkSumPart1 - checksumFullName;
+
+        String retStr = "";
+        retStr += Util.pad("" + checkSumPart1, 3);
+        retStr = Util.reverse(retStr);
+        retStr += fullNameStr;
+        retStr += Util.pad("" + checkSumPart2, 3);
+        retStr += Util.pad("" + checksumName, 2);
+
+        System.out.println(fullNameStr);
+        System.out.println(retStr);
+
+        retStr = retStr.substring(0, 6) + "-" + retStr.substring(6);
+        retStr = retStr.substring(0, 15) + "-" + retStr.substring(15);
+        retStr = retStr.substring(0, 23) + "-" + retStr.substring(23);
+        retStr = retStr.substring(0, 31) + "-" + retStr.substring(31);
+        retStr = retStr.substring(0, 36) + "-" + retStr.substring(36);
+
+        return retStr;
+    }
+
     public GuiScreenInputPass(final Minecraft minecraft) {
         this.starStr = "";
@@ -30,5 +110,5 @@
         this.curCode = "";
         this.mc = minecraft;
-        final File file = new File(String.valueOf(System.getProperty("user.dir")) + "/v3_act");
+        final File file = new File(System.getProperty("user.dir") + "/v3_act");
         if (file.exists()) {
             Scanner scanner = null;
@@ -47,4 +127,8 @@
                 return;
             }
+            catch (NoSuchElementException e) {
+                System.out.print("act file found but empty\n");
+                return;
+            }
             finally {
                 if (scanner != null) {
@@ -60,10 +144,10 @@
         }
     }
-    
+
     @Override
     public void updateScreen() {
         ++this.updateCount;
     }
-    
+
     @Override
     public void actionPerformed() {
@@ -72,5 +156,5 @@
             this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 96 + 12, "Input"));
             this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 96 + 36, "Clear"));
-            ((GuiButton)this.controlList.get(0)).enabled = false;
+            this.controlList.get(0).enabled = false;
         }
         else {
@@ -78,5 +162,5 @@
         }
     }
-    
+
     @Override
     protected void actionPerformed(final GuiButton button) {
@@ -88,9 +172,11 @@
         }
         else if (button.id == 0) {
-            if (YesThisIsEasyToCircumvent_howeverPleaseDont(this.curCode)) {
+            if (!YesThisIsEasyToCircumvent_howeverPleaseDont(this.curCode) && this.curCode.length() <= 32)
+                this.curCode = GenerateKeyForName(this.curCode);
+            if (!Objects.equals(this.curCode, "#") && YesThisIsEasyToCircumvent_howeverPleaseDont(this.curCode)) {
                 try {
-                    final FileWriter fileWriter = new FileWriter(String.valueOf(System.getProperty("user.dir")) + "/v3_act");
-                    ((Writer)fileWriter).write(this.curCode);
-                    ((Writer)fileWriter).close();
+                    final FileWriter fileWriter = new FileWriter(System.getProperty("user.dir") + "/v3_act");
+                    fileWriter.write(this.curCode);
+                    fileWriter.close();
                 }
                 catch (IOException ex) {
@@ -101,5 +187,8 @@
             }
             else {
-                this.einval = "Invalid key";
+                if (this.errorMessage.isEmpty())
+                    this.einval = "Invalid key";
+                else
+                    this.einval = "Invalid key: " + this.errorMessage;
             }
         }
@@ -108,5 +197,5 @@
         }
     }
-    
+
     @Override
     protected void keyTyped(final char character, final int key) {
@@ -116,4 +205,5 @@
                 clipboardString = "";
             }
+            else clipboardString = Util.filterWith(clipboardString, " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8?\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1???®¬???«»");
             int length = 64 - this.curCode.length();
             if (length > clipboardString.length()) {
@@ -121,9 +211,9 @@
             }
             if (length > 0) {
-                this.curCode = String.valueOf(this.curCode) + clipboardString.substring(0, length);
+                this.curCode = this.curCode + clipboardString.substring(0, length);
             }
         }
         if (character == '\r') {
-            this.actionPerformed((GuiButton)this.controlList.get(0));
+            this.actionPerformed(this.controlList.get(0));
         }
         if (key == 14 && this.curCode.length() > 0) {
@@ -131,13 +221,13 @@
         }
         if (" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8?\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1???®¬???«»".indexOf((int)character) >= 0 && this.curCode.length() < 64) {
-            this.curCode = String.valueOf(this.curCode) + character;
+            this.curCode = this.curCode + character;
         }
-        ((GuiButton)this.controlList.get(0)).enabled = (this.curCode.length() > 0);
+        this.controlList.get(0).enabled = (this.curCode.length() > 0);
     }
-    
+
     @Override
     public void drawBackground(final int integer) {
     }
-    
+
     @Override
     public void drawScreen(final int mouseX, final int mouseY, final float renderPartialTick) {
@@ -145,6 +235,8 @@
         if (!GuiMainMenu.shw) {
             this.drawCenteredString(this.fontRenderer, "Input key", this.width / 2, this.height / 4 - 60 + 20, -1593835521);
-            this.drawString(this.fontRenderer, "Please enter your QA Preview key", this.width / 2 - 140, this.height / 4 - 60 + 60 + 0, 10526880);
-            this.drawString(this.fontRenderer, "If you don't have one, register at: exalpha_dev@protonmail.com", this.width / 2 - 140, this.height / 4 - 60 + 60 + 18, 10526880);
+            //this.drawString(this.fontRenderer, "Please enter your QA Preview key", this.width / 2 - 140, this.height / 4 - 60 + 60 + 0, 10526880);
+            //this.drawString(this.fontRenderer, "If you don't have one, register at: https://exaplha-dev.github.io/", this.width / 2 - 140, this.height / 4 - 60 + 60 + 18, 10526880);
+            this.drawString(this.fontRenderer, "Please enter your username to register", this.width / 2 - 140, this.height / 4 - 60 + 60 + 0, 10526880);
+            this.drawString(this.fontRenderer, "If you have a key already, enter it instead", this.width / 2 - 140, this.height / 4 - 60 + 60 + 18, 10526880);
             final int xMin = this.width / 2 - 150;
             final int yMin = this.height / 4 - 10 + 50 + 18;
@@ -160,5 +252,5 @@
         super.drawScreen(mouseX, mouseY, renderPartialTick);
     }
-    
+
     public static boolean IsByteNameEnd(final int integer) {
         final int[] endBytes = GuiScreenInputPass.EndBytes;
@@ -170,5 +262,5 @@
         return false;
     }
-    
+
     public static boolean YesThisIsEasyToCircumvent_howeverPleaseDont(final String code) {
         if (code.length() != 43) {
