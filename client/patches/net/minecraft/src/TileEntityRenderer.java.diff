--- TileEntityRenderer.java
+++ TileEntityRenderer.java
@@ -21,35 +21,35 @@
     public double playerY;
     public double playerZ;
-    
+
     static {
         TileEntityRenderer.instance = new TileEntityRenderer();
     }
-    
+
     private TileEntityRenderer() {
         (this.specialRendererMap = (Map<Class<? extends TileEntity>, TileEntitySpecialRenderer>)new HashMap()).put(TileEntitySign.class, new TileEntitySignRenderer());
         this.specialRendererMap.put(TileEntityMobSpawner.class, new TileEntityMobSpawnerRenderer());
-        final Iterator<TileEntitySpecialRenderer> iterator = (Iterator<TileEntitySpecialRenderer>)this.specialRendererMap.values().iterator();
+        final Iterator<TileEntitySpecialRenderer> iterator = this.specialRendererMap.values().iterator();
         while (iterator.hasNext()) {
-            ((TileEntitySpecialRenderer)iterator.next()).setTileEntityRenderer(this);
+            iterator.next().setTileEntityRenderer(this);
         }
     }
-    
+
     public TileEntitySpecialRenderer getSpecialRendererForClass(final Class<?> tileClass) {
         TileEntitySpecialRenderer specialRendererForClass = (TileEntitySpecialRenderer)this.specialRendererMap.get(tileClass);
         if (specialRendererForClass == null && tileClass != TileEntity.class) {
             specialRendererForClass = this.getSpecialRendererForClass(tileClass.getSuperclass());
-            this.specialRendererMap.put(tileClass, specialRendererForClass);
+this.specialRendererMap.put((Class<? extends TileEntity>) tileClass, specialRendererForClass);
         }
         return specialRendererForClass;
     }
-    
+
     public boolean hasSpecialRenderer(final TileEntity tileEntity) {
         return this.getSpecialRendererForEntity(tileEntity) != null;
     }
-    
+
     public TileEntitySpecialRenderer getSpecialRendererForEntity(final TileEntity tileEntity) {
         return this.getSpecialRendererForClass(tileEntity.getClass());
     }
-    
+
     public void cacheActiveRenderInfo(final World world, final RenderEngine renderEngine, final FontRenderer fontRenderer, final EntityPlayer entityPlayer, final float renderPartialTick) {
         this.worldObj = world;
@@ -63,13 +63,15 @@
         this.playerZ = entityPlayer.lastTickPosZ + (entityPlayer.posZ - entityPlayer.lastTickPosZ) * renderPartialTick;
     }
-    
+
     public void renderTileEntity(final TileEntity tileEntity, final float renderPartialTick) {
         if (tileEntity.getDistanceFrom(this.playerX, this.playerY, this.playerZ) < 4096.0) {
-            final float brightness = this.worldObj.getBrightness(tileEntity.xCoord, tileEntity.yCoord, tileEntity.zCoord);
-            GL11.glColor3f(brightness, brightness, brightness);
+            final float brightnessR = this.worldObj.getBrightness(tileEntity.xCoord, tileEntity.yCoord, tileEntity.zCoord, EnumColorChannel.RED);
+            final float brightnessG = this.worldObj.getBrightness(tileEntity.xCoord, tileEntity.yCoord, tileEntity.zCoord, EnumColorChannel.GREEN);
+            final float brightnessB = this.worldObj.getBrightness(tileEntity.xCoord, tileEntity.yCoord, tileEntity.zCoord, EnumColorChannel.BLUE);
+            GL11.glColor3f(brightnessR, brightnessG, brightnessB);
             this.renderTileEntityAt(tileEntity, tileEntity.xCoord - TileEntityRenderer.staticPlayerX, tileEntity.yCoord - TileEntityRenderer.staticPlayerY, tileEntity.zCoord - TileEntityRenderer.staticPlayerZ, renderPartialTick);
         }
     }
-    
+
     public void renderTileEntityAt(final TileEntity tileEntity, final double x, final double y, final double z, final float renderPartialTick) {
         final TileEntitySpecialRenderer specialRendererForEntity = this.getSpecialRendererForEntity(tileEntity);
@@ -78,5 +80,5 @@
         }
     }
-    
+
     public FontRenderer getFontRenderer() {
         return this.fontRenderer;
